{"version":3,"sources":["Components/Context/index.js","Components/Stats.js","Components/Stopwatch.js","Components/Header.js","Components/Counter.js","Components/Player.js","Components/PlayerList.js","Components/AddPlayerForm.js","Components/App.js","index.js"],"names":["ScoreboardContext","React","createContext","id","Provider","props","useState","players","setPlayers","value","actions","changeScore","index","delta","prevState","updatedPlayers","updatedPlayer","score","addPlayer","name","removePlayer","filter","p","children","Stats","useContext","totalPlayers","length","totalPoints","reduce","total","player","className","Stopwatch","seconds","setSeconds","isRunning","setIsRunning","useEffect","interval","setInterval","clearInterval","onClick","Header","title","Counter","Player","PlayerList","map","key","AddPlayerForm","playerInput","useRef","onSubmit","e","preventDefault","current","currentTarget","reset","type","ref","placeholder","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.0ab8f83a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const ScoreboardContext = React.createContext();\nlet id = 0;\n\nexport const Provider = (props) => {\n  const [players, setPlayers] = useState([]);\n\n  const handleScoreChange = (index, delta) => {\n    setPlayers((prevState) => {\n      const updatedPlayers = [...prevState];\n      const updatedPlayer = { ...updatedPlayers[index] };\n\n      updatedPlayer.score += delta;\n      updatedPlayers[index] = updatedPlayer;\n\n      return updatedPlayers;\n    });\n  };\n\n  const handleAddPlayer = (name) => {\n    setPlayers((prevState) => {\n      return [\n        ...prevState,\n        {\n          name,\n          score: 0,\n          id: (id += 1),\n        },\n      ];\n    });\n  };\n\n  const handleRemovePlayer = (id) => {\n    setPlayers((prevState) => prevState.filter((p) => p.id !== id));\n  };\n\n  return (\n    <ScoreboardContext.Provider\n      value={{\n        players,\n        actions: {\n          changeScore: handleScoreChange,\n          addPlayer: handleAddPlayer,\n          removePlayer: handleRemovePlayer,\n        },\n      }}\n    >\n      {props.children}\n    </ScoreboardContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport { ScoreboardContext } from './Context';\n\nconst Stats = () => {\n  const { players } = useContext(ScoreboardContext);\n  const totalPlayers = players.length;\n  const totalPoints = players.reduce( (total, player) => {\n    return total + player.score;\n  }, 0);\n\n  return (\n    <table className=\"stats\">\n      <tbody>\n        <tr>\n          <td>Players:</td>\n          <td>{ totalPlayers }</td>\n        </tr>\n        <tr>\n          <td>Total Points:</td>\n          <td>{ totalPoints }</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default Stats;","import React, { useEffect, useState } from 'react';\n\nconst Stopwatch = () => {\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() => {\n    if (isRunning) {\n      const interval = setInterval(() => {\n        setSeconds(seconds + 1);\n      }, 1000);\n      return () => clearInterval(interval); \n    }\n  }, [isRunning, seconds]);\n\n  const handleIsRunningChange = () => setIsRunning(prevState => !prevState);\n  const handleReset = () => setSeconds(0);\n\n  return ( \n    <div className=\"stopwatch\">\n      <h2>Stopwatch</h2>\n      <span className=\"stopwatch-time\">{ seconds }</span>\n      <button onClick={handleIsRunningChange}>\n        { isRunning ? 'Stop' : 'Start' }\n      </button>\n      <button onClick={handleReset}>Reset</button>\n    </div>    \n  );\n};\n\nexport default Stopwatch;","import React from 'react';\nimport Stats from './Stats';\nimport Stopwatch from './Stopwatch';\n\nconst Header = ({ title }) => {\n  return (\n    <header>\n      <Stats />\n      <h1>{ title }</h1>\n      <Stopwatch />\n    </header>\n  );\n}\n\nexport default Header;","import React, { useContext } from 'react';\nimport { ScoreboardContext } from './Context';\nimport PropTypes from 'prop-types';\n\nconst Counter = ({ index }) => {\n  const { players, actions } = useContext(ScoreboardContext);\n  return (\n    <div className=\"counter\">\n      <button className=\"counter-action decrement\" onClick={() => actions.changeScore(index, -1)}> - </button>\n      <span className=\"counter-score\">{ players[index].score }</span>\n      <button className=\"counter-action increment\" onClick={() => actions.changeScore(index, 1)}> + </button>\n    </div>\n  );\n};\n\nCounter.propTypes = {\n  index: PropTypes.number\n};\n\nexport default Counter;","import React, { useContext } from 'react';\nimport { ScoreboardContext } from './Context';\nimport PropTypes from 'prop-types';\nimport Counter from './Counter';\n\nconst Player = ({ index }) => {\n    const { players, actions } = useContext(ScoreboardContext);\n    return ( \n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button \n            className=\"remove-player\" \n            onClick={() => actions.removePlayer(players[index].id)}>âœ–\n          </button>\n          { players[index].name }\n        </span>\n        <Counter index={index} />\n      </div>\n    );\n};\n\nPlayer.propTypes = {\n  index: PropTypes.number\n};\n\nexport default Player;","import React, { useContext } from 'react';\nimport { ScoreboardContext } from './Context';\nimport Player from './Player';\n\nconst PlayerList = () => {\n  const { players } = useContext(ScoreboardContext);\n  return (\n    <>\n      {players.map( (player, index) => \n        <Player \n          key={player.id} \n          index={index}\n        />\n      )}\n    </>\n  );\n}\n\nexport default PlayerList;","import React, { useContext, useRef } from 'react';\nimport { ScoreboardContext } from './Context';\n\nconst AddPlayerForm = () => {\n  const { actions } = useContext(ScoreboardContext);\n  const playerInput = useRef();\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    actions.addPlayer(playerInput.current.value);\n    e.currentTarget.reset();\n  }\n\n  return (\n    <form onSubmit={handleSubmit} >\n      <input \n        type=\"text\"\n        ref={playerInput}\n        placeholder=\"Enter a player's name\"\n      />            \n      <input \n        type=\"submit\"\n        value=\"Add Player\"\n      />\n    </form>\n  );\n}\n\nexport default AddPlayerForm;","import React from 'react';\nimport Header from './Header';\nimport PlayerList from './PlayerList';\nimport AddPlayerForm from './AddPlayerForm';\n\nexport default () => {\n  return (\n    <div className=\"scoreboard\">\n      <Header title=\"Scoreboard\" />\n      <PlayerList />\n      <AddPlayerForm />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from './Components/Context';\nimport App from './Components/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n"],"sourceRoot":""}